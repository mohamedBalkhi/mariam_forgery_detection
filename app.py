# app.py

import streamlit as st
try:
    import tensorflow as tf
    from tensorflow import keras
    TF_AVAILABLE = True
except ImportError:
    TF_AVAILABLE = False
from PIL import Image, ImageChops, ImageEnhance
import numpy as np
import os
from datetime import datetime
import io

# Set page configuration
st.set_page_config(
    page_title="كاشف تزوير الصور",
    page_icon="📷",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    /* Ensure Streamlit app itself is LTR for sidebar placement */
    .stApp {
        /* direction: ltr !important; /* This can be too aggressive, usually not needed if body is not RTL */
    }

    /* Main Content Area Wrapper - For RTL text and centered layout */
    .rtl-main-area {
        direction: rtl;
        text-align: right; /* Default text align for this area */
        max-width: 950px; /* Increased max-width slightly */
        margin: 0 auto; /* Center the block */
        padding: 0 1rem; /* Add some padding on the sides */
    }

    /* Headers */
    .app-header {
        font-size: 2.8rem;
        font-weight: bold;
        color: #2c3e50;
        text-align: center; /* Center main headers */
        margin-top: 1rem;
        margin-bottom: 0.5rem;
    }
    .app-subheader {
        font-size: 1.3rem;
        color: #555;
        text-align: center; /* Center main headers */
        margin-bottom: 2.5rem;
    }
    .section-header {
        font-size: 1.8rem;
        color: #3498db;
        text-align: center; /* Section headers also centered */
        margin-top: 2rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid #ecf0f1;
        padding-bottom: 0.5rem;
    }

    /* File Uploader Area */
    .upload-box {
        background-color: #f8f9fa;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
        margin-bottom: 2rem;
        text-align: center;
    }
    div[data-testid="stFileUploader"] label {
        display: none !important; /* Hide default Streamlit label if using custom */
    }
    div[data-testid="stFileUploadDropzone"] p { /* Text inside dropzone */
        font-size: 1.1rem;
        color: #333;
        text-align: center !important;
    }
     div[data-testid="stFileUploader"] span { /* "Browse files" button text */
        text-align: center !important;
    }


    /* Verify Button */
    div[data-testid="stButton"] > button { 
        min-width: 220px;
        font-size: 1.2rem;
        font-weight: bold;
        padding: 0.75rem 2rem;
        margin: 0.5rem auto; 
        display: block;
        border-radius: 8px;
        background-color: #3498db;
        color: white;
        border: none;
    }
    div[data-testid="stButton"] > button:hover {
        background-color: #2980b9;
    }
    div[data-testid="stButton"] > button:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.5);
    }

    /* Image Display */
    .image-card {
        padding: 1rem;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        text-align: center;
        width: 100%;
        min-height: unset !important;
        display: flex;
        flex-direction: column;
        justify-content: flex-start; 
        margin-bottom: 1rem; 
    }
    /* New wrapper for Streamlit image to apply container styles */
    .image-container-wrapper-for-streamlit-image {
        height: 320px; 
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 1rem; 
        background-color: #f0f2f6; 
        border-radius: 6px;
        overflow: hidden; /* Important to contain the image */
        min-height: unset !important;
    }
    /* Target the image generated by st.image inside this wrapper */
    .image-container-wrapper-for-streamlit-image div[data-testid="stImage"] {
        display: flex; /* Helps in centering the image if it's smaller */
        justify-content: center; /* Center horizontally */
        align-items: center; /* Center vertically */
        height: 100%;
        width: 100%;
    }
    .image-container-wrapper-for-streamlit-image div[data-testid="stImage"] > img {
        max-height: 100%;
        max-width: 100%;
        object-fit: contain !important; 
        border-radius: 6px; 
    }
    .image-caption {
        font-size: 1.1rem; 
        font-weight: bold;
        color: #333;
        margin-bottom: 0.5rem; /* Space between caption and image container */
        padding-top: 0.5rem; 
    }
    .ela-explanation {
        font-size: 0.85rem;
        text-align: center;
        margin-top: 0.5rem; /* Space after ELA image container */
        color: #666;
    }

    /* Result Display */
    .result-box {
        padding: 1.5rem 2rem;
        border-radius: 10px;
        margin: 1rem auto;
        text-align: center;
        border-width: 2px;
        border-style: solid;
        max-width: 600px;
    }
    .result-box h3 {
        font-size: 1.6rem;
        font-weight: bold;
        margin-bottom: 0.5rem !important;
    }
    .authentic {
        background-color: #e6ffed;
        border-color: #5cb85c;
        color: #3c763d;
    }
    .authentic h3 {
        color: #3c763d !important;
    }
    .forged {
        background-color: #ffe6e6;
        border-color: #d9534f;
        color: #a94442;
    }
    .forged h3 {
        color: #a94442 !important;
    }

    .stMetric {
        background-color: transparent !important;
        border: 1px solid #ddd;
        padding: 1rem;
        border-radius: 8px;
        text-align: center; 
        margin: 1rem auto;
        width: 280px; 
        direction: rtl; 
    }
    .stMetric label { 
        font-size: 1rem;
        color: #555;
        text-align: right !important; 
        display: block; 
        margin-bottom: 0.25rem;
    }
    .stMetric p { 
        font-size: 1.8rem !important;
        font-weight: bold;
        color: #333 !important;
        margin-bottom: 0 !important;
        text-align: center !important; 
    }

    /* Expander */
    .stExpander {
        border: 1px solid #eee;
        border-radius: 8px;
        margin: 1.5rem auto;
        max-width: 600px;
    }
    .stExpander header { 
        font-size: 1.1rem;
        text-align: right !important; 
    }
    .stExpander div[data-testid="stMarkdownContainer"] p,
    .stExpander div[data-testid="stMarkdownContainer"] ul,
    .stExpander div[data-testid="stMarkdownContainer"] li {
        direction: rtl;
        text-align: right !important;
    }
    .stExpander div[data-testid="stMarkdownContainer"] ul {
        padding-right: 20px; 
        padding-left: 0;
    }

    /* Sidebar Styling */
    div[data-testid="stSidebarContent"] {
        direction: rtl; 
        padding: 1.5rem 1rem;
        background-color: #f8f9fa;
    }
    div[data-testid="stSidebarContent"] h2,
    div[data-testid="stSidebarContent"] h3,
    div[data-testid="stSidebarContent"] h4 {
        text-align: right !important;
        color: #0056b3; 
    }
    div[data-testid="stSidebarContent"] p,
    div[data-testid="stSidebarContent"] li {
        text-align: right !important;
        font-size: 0.95rem;
        color: #333;
        margin-bottom: 0.5rem;
        line-height: 1.6;
    }
    div[data-testid="stSidebarContent"] ul,
    div[data-testid="stSidebarContent"] ol {
        padding-right: 20px;
        padding-left: 0;
        margin-right: 10px; 
    }
    div[data-testid="stSidebarContent"] .sidebar-content {
        margin-bottom: 1.5rem;
    }
    div[data-testid="stSidebarContent"] img { 
        display: block;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 0.5rem; 
    }
    .centered-text {
        text-align: center;
        width: 100%;
    }
</style>
""", unsafe_allow_html=True)

# Import gdown for downloading from Google Drive
try:
    import gdown
except ImportError:
    st.warning("⚠️ جاري تثبيت حزمة gdown لتنزيل النموذج من Google Drive...")
    import subprocess
    import sys
    subprocess.check_call([sys.executable, "-m", "pip", "install", "gdown"])
    import gdown
    st.rerun() # Rerun to ensure gdown is available

# --- إعدادات وتكوينات ---
IMG_WIDTH = 224
IMG_HEIGHT = 224
IMAGE_SIZE = (IMG_HEIGHT, IMG_WIDTH)
MODEL_PATH = 'models/best_dual_model_robust_head.keras'
GDRIVE_FILE_ID = '1aiLqyEm1kdUbxmjBJfE755H88r5Lu8Hq'

# --- دوال مساعدة ---
def download_model_if_needed(model_path, gdrive_file_id):
    models_dir = os.path.dirname(model_path)
    if models_dir and not os.path.exists(models_dir):
        try:
            os.makedirs(models_dir, exist_ok=True)
            # st.info(f"✓ تم إنشاء مجلد '{models_dir}'") # Can be noisy, consider removing for cleaner UI
        except Exception as e:
            st.error(f"❌ خطأ في إنشاء مجلد النماذج: {e}")
            return False

    if not os.path.exists(model_path):
        url = f'https://drive.google.com/uc?id={gdrive_file_id}'
        progress_bar = st.progress(0)
        status_text = st.empty()
        status_text.info("⏬ جاري تنزيل النموذج من Google Drive... يرجى الانتظار.")
        
        try:
            with st.spinner("Downloading model... This may take a few moments."):
                 gdown.download(url, model_path, quiet=False) 
            progress_bar.progress(100) 
            status_text.success("✅ تم تنزيل النموذج بنجاح!")
            import time
            time.sleep(2)
            status_text.empty()
            progress_bar.empty()
        except Exception as e:
            status_text.error(f"❌ حدث خطأ أثناء تنزيل النموذج: {e}")
            progress_bar.empty()
            return False
    return os.path.exists(model_path)

@st.cache_resource
def load_my_model(model_path, gdrive_file_id):
    if not TF_AVAILABLE:
        st.error("❌ TensorFlow غير مثبت. يرجى تثبيت TensorFlow أولاً.")
        st.code("""
# لأجهزة Mac مع شريحة Apple Silicon (M1/M2/M3):
pip install tensorflow-macos tensorflow-metal

# لأجهزة أخرى (Windows/Linux/Mac Intel):
pip install tensorflow
        """)
        return None
    
    if not download_model_if_needed(model_path, gdrive_file_id):
        # Error message is handled by download_model_if_needed or the more specific one in initialize_app
        return None 
    
    model_loading_message = st.empty()
    try:
        model_loading_message.info("⏳ جاري تحميل النموذج...")
        model = keras.models.load_model(model_path)
        model_loading_message.success("✅ تم تحميل النموذج بنجاح!")
        import time
        time.sleep(1) # Shorter pause
        model_loading_message.empty()
        return model
    except Exception as e:
        model_loading_message.error(f"❌ حدث خطأ أثناء تحميل النموذج: {e}")
        return None

# ------------------  PRE-PROCESSING HELPERS  ------------------
def preprocess_image_rgb(pil_img, target_size=IMAGE_SIZE):
    """RGB → ResNetV2 preprocess_input (range [-1,1])."""
    pil_img = pil_img.convert("RGB").resize(target_size)
    arr = keras.preprocessing.image.img_to_array(pil_img)
    arr = tf.keras.applications.resnet_v2.preprocess_input(arr)
    return np.expand_dims(arr, axis=0)          # shape (1,h,w,3)

def preprocess_image_ela(pil_img, target_size=IMAGE_SIZE):
    """
    ELA → NO manual scaling! Values remain 0-255 float32 because
    the model contains layers.Rescaling(1/255) in that branch.
    """
    pil_img = pil_img.convert("RGB").resize(target_size)
    arr = keras.preprocessing.image.img_to_array(pil_img).astype(np.float32)
    return np.expand_dims(arr, axis=0)          # shape (1,h,w,3)


def generate_ela_image(image_pil, quality=90, scale_factor=15):
    """Generates an ELA image from a PIL image."""
    temp_buffer = io.BytesIO()
    # Save the image with a specific JPEG quality
    image_pil.save(temp_buffer, 'JPEG', quality=quality)
    temp_buffer.seek(0) # Rewind buffer
    resaved_image = Image.open(temp_buffer)
    
    # Calculate the difference between the original and resaved image
    ela_image = ImageChops.difference(image_pil, resaved_image)
    
    # Enhance the brightness of the ELA image to make differences more visible
    # Ensure ELA is RGB before brightness enhancement if difference produces single channel
    if ela_image.mode != 'RGB':
        ela_image = ela_image.convert('RGB')
    ela_image = ImageEnhance.Brightness(ela_image).enhance(scale_factor)
    
    temp_buffer.close()
    return ela_image

def verify_image(pil_rgb, model):
    ela_pil = generate_ela_image(pil_rgb, quality=90, scale_factor=15)
    rgb_arr = preprocess_image_rgb(pil_rgb)
    ela_arr = preprocess_image_ela(ela_pil)
    proba   = model.predict([rgb_arr, ela_arr], verbose=0)[0,0]
    return proba, ela_pil

@st.cache_resource
def initialize_app():
    if TF_AVAILABLE:
        model = load_my_model(MODEL_PATH, GDRIVE_FILE_ID)
        if model is None:
            st.error("❌ حدث خطأ أثناء تحميل النموذج. لا يمكن تشغيل التطبيق.")
            # This message will be shown if download_model_if_needed or keras.models.load_model fails within load_my_model
            return None
        return model
    else:
        st.error("❌ TensorFlow غير مثبت. لا يمكن تشغيل التطبيق بدون TensorFlow.")
        st.warning("⚠️ الرجاء تثبيت TensorFlow بالأمر المناسب لنظامك:")
        st.code("""
# لأجهزة Mac مع شريحة Apple Silicon (M1/M2/M3):
pip install tensorflow-macos tensorflow-metal

# لأجهزة أخرى (Windows/Linux/Mac Intel):
pip install tensorflow
        """)
        return None

# --- واجهة المستخدم لتطبيق Streamlit ---
def main():
    model = initialize_app()

    st.markdown('<div class="rtl-main-area">', unsafe_allow_html=True) 

    st.markdown('<h1 class="app-header">🔍 كاشف تزوير الصور الرقمية</h1>', unsafe_allow_html=True)
    st.markdown('<p class="app-subheader">اكتشف ما إذا كانت صورك أصلية أم تم التلاعب بها بدقة عالية</p>', unsafe_allow_html=True)

    if model is not None:
        st.markdown('<div class="upload-box">', unsafe_allow_html=True)
        st.markdown('<h2 class="section-header" style="margin-top:0; border-bottom:none; margin-bottom:1.5rem;">ارفع صورة للتحليل</h2>', unsafe_allow_html=True)
        
        _col_fu_left, col_fu_mid, _col_fu_right = st.columns([1,2,1])
        with col_fu_mid:
            uploaded_file = st.file_uploader(" ", type=["jpg", "jpeg", "png", "bmp", "tif", "tiff"], label_visibility="collapsed", key="main_file_uploader")
        st.markdown('</div>', unsafe_allow_html=True)

        if uploaded_file is not None:
            try:
                img_rgb_pil = Image.open(uploaded_file).convert("RGB")
            except Exception as e:
                st.error(f"خطأ في تحميل الصورة: {e}")
                img_rgb_pil = None

            if img_rgb_pil:
                # -------- 1️⃣ أعمدة متجاورة ثابتة --------
                col_rgb, col_ela = st.columns(2, gap="large")

                # —­­– RGB preview (ثابت) —
                with col_rgb:
                    st.markdown("#### الصورة الأصلية")
                    st.image(img_rgb_pil, use_container_width=True)

                # —­­– ELA placeholder سيُستبدَل بعد التحقق —
                with col_ela:
                    st.markdown("#### صورة الـ ELA")
                    ela_slot = st.empty()
                    ela_slot.info("اضغط زر التحقق لإظهار صورة ELA.")

                # -------- 2️⃣ زر التحقق --------
                check_btn_center = st.columns([1,1,1])[1]
                with check_btn_center:
                    if st.button("🔬 تحقق من الصورة الآن!", key="verify_button"):
                        with st.spinner("⏳ جاري التحليل..."):
                            proba, ela_pil = verify_image(img_rgb_pil, model)

                        # تحديث عمود الـELA بدل إنشاء جديد
                        with col_ela:
                            ela_slot.image(ela_pil, use_container_width=True)

                        # -------- 3️⃣ نتيجة التحليل --------
                        st.markdown("---")
                        st.markdown('<h2 class="section-header">📜 نتيجة التحليل</h2>', unsafe_allow_html=True)

                        threshold = 0.5
                        if proba > threshold:
                            conf = proba * 100
                            st.markdown('<div class="result-box forged"><h3>⚠️ الصورة تبدو مزورة</h3></div>', unsafe_allow_html=True)
                            st.metric("درجة الثقة (مزورة)", f"{conf:.2f}%")
                        else:
                            conf = (1 - proba) * 100
                            st.markdown('<div class="result-box authentic"><h3>✅ الصورة تبدو أصلية</h3></div>', unsafe_allow_html=True)
                            st.metric("درجة الثقة (أصلية)", f"{conf:.2f}%")

                        with st.expander("تفاصيل إضافية"):
                            st.write(f"Raw probability: **{proba:.6f}**  |  Threshold: **{threshold}**")
            elif uploaded_file and not img_rgb_pil:
                 pass 
            else: 
                st.markdown("""
                <div style="text-align: center; padding: 2rem; background-color: #e9ecef; border-radius: 10px; margin: 2rem auto; max-width: 700px; box-shadow: 0 4px 15px rgba(0,0,0,0.05);">
                    <img src="https://img.icons8.com/fluency/96/000000/image-file.png" alt="Upload icon" width="70" style="margin-bottom: 1rem;">
                    <p style="font-size: 1.3rem; margin-bottom: 0.5rem;">لم يتم رفع أي صورة بعد.</p>
                    <p style="font-size: 1rem; color: #495057;">يرجى استخدام منطقة التحميل أعلاه لاختيار صورة والبدء في عملية التحقق.</p>
                </div>
                """, unsafe_allow_html=True)
    else: 
        # Error message if model didn't load (already handled by initialize_app more specifically)
        # but this serves as a final fallback.
        st.error("❌ خطأ فادح: لم يتم تحميل نموذج الذكاء الاصطناعي. لا يمكن متابعة عملية التحقق.")
        st.info("الرجاء التأكد من اتصالك بالإنترنت لتنزيل النموذج إذا كانت هذه هي المرة الأولى، أو تحقق من مسار النموذج المحلي وإعدادات TensorFlow.")

    st.markdown('</div>', unsafe_allow_html=True) 

    # Sidebar content
    with st.sidebar:
        st.image("https://img.icons8.com/external-flaticons-lineal-color-flat-icons/64/000000/external-detective-literature-flaticons-lineal-color-flat-icons.png", width=70) 

        st.markdown('<h2 style="text-align:center; margin-bottom:1rem;">عن التطبيق</h2>', unsafe_allow_html=True)
        st.markdown("""
        <div class="sidebar-content">
        يهدف هذا التطبيق التجريبي إلى كشف التلاعب في الصور الرقمية باستخدام تقنيات التعلم العميق. يتم تحليل كل صورة عبر مسارين: الألوان الأصلية (RGB) وتحليل مستويات الخطأ (ELA)، للكشف عن أدق التعديلات.
        <br><br>
        النموذج الحالي تم تدريب رأسه المخصص على مجموعة بيانات CASIA v2.0، مع الاستفادة من شبكتي ResNet50V2 (مدربة مسبقًا على ImageNet) كقاعدة مجمدة لاستخلاص الميزات.
        </div>
        """, unsafe_allow_html=True)

        st.markdown('<h3 style="text-align:center; margin-top:2rem; margin-bottom:1rem;">كيفية الاستخدام</h3>', unsafe_allow_html=True)
        st.markdown("""
        <div class="sidebar-content">
        <ol>
            <li>اختر صورة من جهازك (JPG, PNG, TIFF, BMP).</li>
            <li>اضغط على زر "تحقق من الصورة الآن!".</li>
            <li>انتظر ظهور النتيجة وتحليل ELA.</li>
        </ol>
        </div>
        """, unsafe_allow_html=True)

        st.markdown('<h3 style="text-align:center; margin-top:2rem; margin-bottom:1rem;">التكنولوجيا المستخدمة</h3>', unsafe_allow_html=True)
        st.markdown("""
        <div class="sidebar-content">
        <ul>
            <li><b>النموذج:</b> شبكة CNN بإدخال مزدوج (ResNet50V2 x2).</li>
            <li><b>القواعد الأساسية:</b> ResNet50V2 (ImageNet، مجمدة).</li>
            <li><b>رأس النموذج:</b> طبقات تصنيف مُدربة خصيصًا.</li>
            <li><b>المدخلات:</b> RGB (معالجة ResNetV2 القياسية) و ELA (قيم 0-255 خام، مع Rescaling داخل النموذج).</li>
            <li><b>بيانات التدريب (للرأس):</b> CASIA v2.0.</li>
            <li><b>الأدوات:</b> TensorFlow, Keras, Streamlit, Pillow, gdown.</li>
            <li><b>مرحلة النموذج:</b> رأس مُدرَّب (القواعد الأساسية مجمدة).</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
        st.markdown("---")
        st.markdown('<div class="sidebar-content" style="text-align:center;">', unsafe_allow_html=True)
        st.markdown('<h4 style="margin-bottom:0.3rem;">إعداد الطالبة</h4>', unsafe_allow_html=True) 
        st.markdown('**مريم عبد العال | Mariam Abd Alaal**', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)

        st.markdown("---")
        current_time = datetime.now()
        st.markdown(f'<p style="text-align: center; font-size: 0.85em; color:#666;">📅 {current_time.strftime("%Y-%m-%d %H:%M")}</p>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()
